{"version":3,"sources":["util/Spotify.js","Components/ConnectToSpotify/ConnectToSpotify.js","Components/SearchBar/SearchBar.js","Components/Audio/Audio.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/PlaylistItem/PlaylistItem.js","Components/PlaylistList/PlaylistList.js","Components/PlaylistResults/PlaylistResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","getUserInfo","userInfo","fetch","headers","Authorization","then","response","json","jsonResponse","display_name","search","term","tracks","items","map","track","id","name","artist","artists","album","uri","trackUrl","preview_url","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","getPlaylist","playlists","playlist","number","total","getTrack","getPlaylistTracks","ConnectToSpotify","props","state","user","connect","bind","event","this","access","setState","preventDefault","className","title","onClick","React","Component","SearchBar","handleTermChange","onSearch","e","target","value","placeholder","onChange","Audio","document","getElementById","volume","controls","type","src","Track","addTrack","removeTrack","onAdd","onRemove","isRemoval","renderPlayback","renderAction","TrackList","key","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","PlaylistItem","handleClick","PlaylistList","clickItem","PlaylistResults","playlistResults","App","updatePlaylistName","getPlaylists","currentPlayList","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20526a7c.chunk.js","sourcesContent":["let accessToken;\r\nconst clientId = '2ed714af0e1e4a31961f01ca76147579';\r\nconst redirectUri = 'http://save2spotify.surge.sh';\r\n\r\nconst Spotify = { \r\n    getAccessToken(){\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch =  window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //this clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n        \r\n    },\r\n\r\n    getUserInfo(accessToken){\r\n        let userInfo;\r\n        return fetch (`https://api.spotify.com/v1/me`,\r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => { //converts response to JSON\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            userInfo = jsonResponse.display_name;\r\n            if (!jsonResponse.display_name) {\r\n                return '??';\r\n            } \r\n            return userInfo;\r\n        })\r\n    },\r\n\r\n    search(term, accessToken){\r\n        return fetch (`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => { //converts response to JSON\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            } \r\n            return jsonResponse.tracks.items.map(track => ({  //maps JSON response to an array of objects\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri,\r\n                trackUrl: track.preview_url\r\n            }));\r\n        })\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { \r\n            headers: headers\r\n            }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris: trackUris})\r\n                })\r\n            })\r\n        })\r\n    },\r\n\r\n    getPlaylist(accessToken){\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let playlists;\r\n\r\n        return fetch('https://api.spotify.com/v1/me/playlists', { \r\n            headers: headers\r\n            }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            playlists = jsonResponse.items;\r\n            if (!jsonResponse.items) {\r\n            return [];\r\n            } \r\n            return playlists.map(playlist => ({  //maps JSON response to an array of objects\r\n            id: playlist.id,\r\n            name: playlist.name,\r\n            number: playlist.tracks.total,\r\n            uri: playlist.uri\r\n        }));\r\n        })\r\n    },\r\n\r\n    getTrack(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch (`https://api.spotify.com/v1/tracks/${term}`,\r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => { //converts response to JSON\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.album) {\r\n                return {};\r\n            } \r\n            return jsonResponse.album.preview_url;\r\n        })\r\n    },\r\n\r\n    getPlaylistTracks(term, accessToken){\r\n        return fetch (`https://api.spotify.com/v1/playlists/${term}/tracks`,\r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => { //converts response to JSON\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.items) {\r\n                return [];\r\n            } \r\n            return jsonResponse.items.map(track => ({  //maps JSON response to an array of objects\r\n                id: track.track.id,\r\n                name: track.track.name,\r\n                artist: track.track.album.artists[0].name,\r\n                album: track.track.album.name,\r\n                uri: track.track.uri,\r\n                trackUrl: track.track.preview_url\r\n            }));\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n\r\n","import React from 'react';\r\nimport './ConnectToSpotify.css';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass ConnectToSpotify extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {user: '...'};\r\n        this.connect=this.connect.bind(this);\r\n    }\r\n\r\n    connect(event){\r\n        Spotify.getUserInfo(this.props.access)\r\n        .then(userInfo => {\r\n            this.setState(\r\n                {user: userInfo}\r\n                )\r\n            }\r\n        );\r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"Connect\" title='Click to connect to your Spotify account. You may be prompted to log in and grant access to this app.'>\r\n            <button className=\"ConnectButton\" onClick={this.connect}>Connected to: {this.state.user}</button>\r\n        </div>\r\n        )};\r\n}\r\n\r\nexport default ConnectToSpotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {term: ''};\r\n        this.search=this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(event){\r\n        this.props.onSearch(this.state.term);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"SearchBar\">\r\n            <input placeholder=\"Enter A Song, Album, or Artist\"\r\n                    onChange={this.handleTermChange} />\r\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n        </div>\r\n        )};\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Audio.css';\r\n\r\nclass Audio extends React.Component {\r\n    componentDidMount(){\r\n        let audio = document.getElementById('myaudio');\r\n        audio.volume = 0.2;\r\n    }\r\n\r\n    render(){\r\n        return <audio id=\"myaudio\" controls type=\"audio/mp3\" src={this.props.trackUrl} ></audio>\r\n    }\r\n}\r\n\r\nexport default Audio","import React from 'react';\r\nimport './Track.css';\r\nimport Audio from '../Audio/Audio';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track); //calls the addTrack method in App class with the value of the track object\r\n    }\r\n    \r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n\r\n\r\n    renderAction(){\r\n        if (this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n        }\r\n    }\r\n\r\n    renderPlayback(){\r\n        if (this.props.trackUrl){\r\n            return <Audio trackUrl={this.props.trackUrl}/>\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        return (\r\n        <div>    \r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p> {this.props.track.artist} | {this.props.track.album}</p>\r\n                    {this.renderPlayback()}\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component{\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"TrackList\">\r\n                { \r\n                this.props.tracks.map(track => { \r\n                    return <Track track={track} \r\n                                    key={track.id} \r\n                                    onAdd={this.props.onAdd} \r\n                                    onRemove={this.props.onRemove}\r\n                                    isRemoval={this.props.isRemoval}\r\n                                    trackUrl={track.trackUrl} />})\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\n\r\nexport default TrackList\r\n\r\n/* addTrack method passed down from App to SearchResults to TrackList*/","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\" >\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}  \r\n                            onAdd={this.props.onAdd}\r\n                            isRemoval={false} \r\n                            />\r\n            </div>\r\n        )};\r\n};\r\n\r\nexport default SearchResults\r\n\r\n/*the onAdd prop passed down from App referening the addTrack method*/","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    \r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input value={this.props.playlistName} onChange={this.handleNameChange}/>\r\n                    <TrackList tracks={this.props.playlistTracks} \r\n                                onRemove={this.props.onRemove} \r\n                                isRemoval={true} />\r\n                <button className=\"Playlist-save\" \r\n                        onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )};\r\n}\r\n\r\nexport default Playlist","import React from 'react';\r\nimport './PlaylistItem.css';\r\n\r\n\r\n\r\nclass PlaylistItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={term: this.props.playlist.id};\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event){\r\n        this.props.onSearch(this.state.term);\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n        <div>    \r\n            <div className=\"PlaylistItem\" title='Click on the playlist to retrieve the tracks in this playlist.'>\r\n                <div className=\"PlaylistItem-information\">\r\n                    <h3 value={this.props.playlist.id}\r\n                        onClick={this.handleClick}\r\n                        >{this.props.playlist.name}</h3>\r\n                        <p>Number of tracks: {this.props.playlist.number}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlaylistItem;\r\n\r\n","import React from 'react';\r\nimport './PlaylistList.css';\r\nimport PlaylistItem from '../PlaylistItem/PlaylistItem';\r\n\r\nclass PlaylistList extends React.Component {\r\n   \r\n    render(){\r\n        return(\r\n            <div className=\"listItem\" >\r\n                { \r\n                this.props.playlists.map(playlist => { \r\n                    return <PlaylistItem playlist={playlist} \r\n                            key={playlist.id}\r\n                            onSearch={this.props.clickItem}\r\n                                            />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PlaylistList\r\n\r\n\r\n/*\r\n\r\n\r\n}*/\r\n","import React from 'react';\r\nimport './PlaylistResults.css';\r\nimport PlaylistList from '../PlaylistList/PlaylistList';\r\n\r\n\r\nclass PlaylistResults extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n    search(event){\r\n        this.props.onClick(event);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"PlaylistResults\" >\r\n                <h2 onClick={this.search} title='If you are connected to Spotify, click here to retrieve your playlists'>My Playlists</h2>\r\n                <PlaylistList playlists={this.props.playlistResults}\r\n                             clickItem={this.props.clickItem}\r\n                             />\r\n            </div>\r\n        )};\r\n};\r\n\r\nexport default PlaylistResults","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport ConnectToSpotify from '../ConnectToSpotify/ConnectToSpotify';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport PlaylistResults from '../PlaylistResults/PlaylistResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      accessToken: '',\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n      playlistResults: [],\n      isRemoval: 'false',\n      trackUrl: '',\n      };\n    /*this.connectToSpotify = this.connectToSpotify.bind(this);*/\n    this.addTrack = this.addTrack.bind(this);  \n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName =this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.getPlaylistTracks= this.getPlaylistTracks.bind(this);\n  }\n\n  componentDidMount(){\n    this.setState({accessToken: Spotify.getAccessToken()})\n  }\n\n\n /* connectToSpotify(){ \n    Spotify.getUserInfo(this.state.accessToken).then(userInfo => {\n      this.setState({user: userInfo})})\n  }*/\n  \n  addTrack(track){\n    let currentPlayList = this.state.playlistTracks;\n    if(currentPlayList.find(savedTrack => savedTrack.id === track.id)){\n      return \n    } else {\n      currentPlayList.push(track);\n      this.setState(\n        {playlistTracks: currentPlayList}\n      )\n    }; \n  }\n\n  removeTrack(track){\n    let currentPlayList = this.state.playlistTracks;\n    currentPlayList = currentPlayList.filter(currentTrack => currentTrack.id !== track.id); //filters out tracks whos id is not in the current list\n    this.setState(\n      {playlistTracks: currentPlayList}\n    )\n  }\n\n  updatePlaylistName(name){\n    this.setState({\n      playlistName: name\n    })\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    Spotify.search(term, this.state.accessToken).then(searchResults => {\n    this.setState({ searchResults: searchResults})\n    })\n  }\n\n  getPlaylists(){\n    Spotify.getPlaylist(this.state.accessToken).then(playlistResults => {\n      this.setState({ playlistResults: playlistResults})\n    })\n  }\n\n  getPlaylistTracks(term){\n    Spotify.getPlaylistTracks(term, this.state.accessToken).then(searchResults => {\n      this.setState({ \n        searchResults: searchResults,\n        isRemoval: 'true'})\n    })\n  }\n  \n  render(){\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"title\">\n            <h1>Save<span className=\"highlight\">2</span>Spotify</h1>\n          </div>\n        </div>\n       <div className=\"App\">\n          <ConnectToSpotify  access={this.state.accessToken}/>\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\" id=\"tracklist\">\n            <SearchResults searchResults = {this.state.searchResults} \n                            onAdd={this.addTrack}\n                            isRemoval={this.state}\n                            />\n          <div> \n            <Playlist playlistName = {this.state.playlistName} \n                      playlistTracks = {this.state.playlistTracks} \n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} \n            />\n            <PlaylistResults playlistResults={this.state.playlistResults} \n                             onClick={this.getPlaylists} \n                             clickItem={this.getPlaylistTracks}\n                             />\n          </div>\n          </div>\n       </div>\n     </div>\n   );\n  }\n}\n\nexport default App;\n\n\n//onAdd passes addTrack method to SearchResults\n//onRemove passes removeTrack method to Playlist\n//onConnect={this.connectToSpotify}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}